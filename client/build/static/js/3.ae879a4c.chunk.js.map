{"version":3,"sources":["components/common/HelloCard.tsx","components/Login/Login.tsx"],"names":["HelloCard","title","className","dispatchState","LogInTC","connect","state","error","app","isAuth","loginSchema","yup","email","required","password","trim","min","max","matches","onSubmit","useCallback","values","to","message","initialValues","validationSchema","name","placeholder","type"],"mappings":"8GAAA,gBAceA,IARqB,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAClC,OAAO,gCACH,qBAAIC,UAAU,YAAd,4BAA0CD,EAA1C,OACA,mBAAGC,UAAU,OAAb,kGACA,oBAAIA,UAAU,c,iCCVtB,8FAsDMC,EAAgB,CAClBC,aASWC,uBAfE,SAACC,GAAD,MAAuB,CACpCC,MAAOD,EAAME,IAAID,MACjBE,OAAQH,EAAME,IAAIC,UAaWN,EAAlBE,EArDoB,SAAC,GAA8B,IAA7BE,EAA4B,EAA5BA,MAAOE,EAAqB,EAArBA,OAAQL,EAAa,EAAbA,QAE1CM,EAAcC,IAAW,CAC3BC,MAAOD,MAAaC,MAAM,mBAAmBC,SAAS,qBACtDC,SAAUH,MACLI,OACAC,IAAI,GACJC,IAAI,IACJC,QAAQ,MAAO,sCACfA,QAAQ,kFAAuB,gDAC/BA,QAAQ,kFAAuB,gDAC/BL,SAAS,0BAGZM,EAAWC,uBAAY,SAACC,GAC1BjB,EAAQiB,KACT,CAACjB,IAIJ,OAAIK,EAAe,cAAC,IAAD,CAAUa,GAAG,cACzB,sBAAKpB,UAAU,OAAf,UACH,cAAC,IAAD,CAAWD,MAAM,WAChBM,GAAS,cAAC,IAAD,CAAUgB,QAAShB,EAAMgB,UACnC,cAAC,IAAD,CAAQC,cANU,CAACZ,MAAO,GAAIE,SAAU,IAOhCW,iBAAkBf,EAClBS,SAAUA,EAFlB,SAGI,eAAC,IAAD,CAAMjB,UAAU,OAAhB,UACI,cAAC,IAAD,CAAWwB,KAAK,QAAQC,YAAY,qBACpC,cAAC,IAAD,CAAWD,KAAK,WAAWE,KAAK,WAAWD,YAAY,eACvD,wBAAQC,KAAK,SAAS1B,UAAU,kBAAhC,yBAGR,uBACA,cAAC,IAAD,CAASoB,GAAG,UAAUpB,UAAU,gBAAhC","file":"static/js/3.ae879a4c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\ninterface IState {\r\n    title: string\r\n}\r\n\r\nconst HelloCard: React.FC<IState> = ({title}) => {\r\n    return <div>\r\n        <h2 className=\"display-4\">Hello! This is {title}.</h2>\r\n        <p className=\"lead\">This is a simple contacts APP. Authorize or create an account to use all possibility</p>\r\n        <hr className=\"my-4\"/>\r\n    </div>\r\n}\r\n\r\nexport default HelloCard","import React, {useCallback} from 'react'\r\nimport {NavLink, Redirect} from 'react-router-dom'\r\nimport {connect} from \"react-redux\"\r\nimport {StoreType} from \"../../store\"\r\nimport AppError from \"../common/AppError\"\r\nimport {LogInTC} from \"../../store/app-reducer\"\r\nimport HelloCard from \"../common/HelloCard\"\r\nimport {Form, Formik} from \"formik\"\r\nimport * as yup from 'yup'\r\nimport FormField from \"../common/FormFields/FormField\"\r\n\r\nconst Login: React.FC<StateType> = ({error, isAuth, LogInTC}) => {\r\n\r\n    const loginSchema = yup.object({\r\n        email: yup.string().email('Incorrect email').required('Email is required'),\r\n        password: yup.string()\r\n            .trim()\r\n            .min(8)\r\n            .max(50)\r\n            .matches(/\\d+/, 'Password should include one number')\r\n            .matches(/[a-zа-щієїґюьяыёъ]+/, 'Password should include one lowercase letter')\r\n            .matches(/[A-ZА-ЩІЄЇҐЮЬЯЫЁЪ]+/, 'Password should include one uppercase letter')\r\n            .required('Password is required')\r\n    })\r\n\r\n    const onSubmit = useCallback((values) => {\r\n        LogInTC(values)\r\n    }, [LogInTC])\r\n\r\n    const initialValues = {email: '', password: ''}\r\n\r\n    if (isAuth) return <Redirect to='/contacts'/>\r\n    return <div className=\"mt-4\">\r\n        <HelloCard title='Log In'/>\r\n        {error && <AppError message={error.message}/>}\r\n        <Formik initialValues={initialValues}\r\n                validationSchema={loginSchema}\r\n                onSubmit={onSubmit}>\r\n            <Form className='py-3'>\r\n                <FormField name='email' placeholder='name@example.com'/>\r\n                <FormField name='password' type='password' placeholder='Example123'/>\r\n                <button type=\"submit\" className=\"btn btn-primary\">Log In</button>\r\n            </Form>\r\n        </Formik>\r\n        <hr/>\r\n        <NavLink to='/signUp' className=\"dropdown-item\">New around here? Sign up</NavLink>\r\n    </div>\r\n}\r\n\r\nconst mapState = (state: StoreType) => ({\r\n    error: state.app.error,\r\n    isAuth: state.app.isAuth\r\n})\r\n\r\nconst dispatchState = {\r\n    LogInTC\r\n}\r\n\r\ninterface IDispatch {\r\n    LogInTC: (data: { email: string, password: string }) => void\r\n}\r\n\r\ntype StateType = ReturnType<typeof mapState> & IDispatch\r\n\r\nexport default connect(mapState, dispatchState)(Login)"],"sourceRoot":""}