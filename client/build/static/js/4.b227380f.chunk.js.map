{"version":3,"sources":["components/common/HelloCard.tsx","components/SignUp/SignUp.tsx"],"names":["HelloCard","title","className","dispatchState","RegisterTC","connect","state","error","app","isAuth","SignupSchema","yup","name","min","matches","required","email","trim","password","max","onSubmit","useCallback","values","to","message","initialValues","validationSchema","placeholder","type"],"mappings":"8GAAA,gBAceA,IARqB,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAClC,OAAO,gCACH,qBAAIC,UAAU,YAAd,4BAA0CD,EAA1C,OACA,mBAAGC,UAAU,OAAb,kGACA,oBAAIA,UAAU,c,iCCVtB,8FA6DMC,EAAgB,CAClBC,gBASWC,uBAfE,SAACC,GAAD,MAAuB,CACpCC,MAAOD,EAAME,IAAID,MACjBE,OAAQH,EAAME,IAAIC,UAaWN,EAAlBE,EA3DqB,SAAC,GAAiC,IAAhCE,EAA+B,EAA/BA,MAAOH,EAAwB,EAAxBA,WAAYK,EAAY,EAAZA,OAE/CC,EAAeC,IAAW,CAC5BC,KAAMD,MACDE,IAAI,GACJC,QAAQ,uFAA4B,wCACpCC,SAAS,oBACdC,MAAOL,MAAaM,OAAOD,MAAM,iBAAiBD,SAAS,qBAC3DG,SAAUP,MACLM,OACAJ,IAAI,GACJM,IAAI,IACJL,QAAQ,MAAO,sCACfA,QAAQ,kFAAuB,+CAC/BA,QAAQ,kFAAuB,+CAC/BC,SAAS,0BAGZK,EAAWC,uBAAY,SAACC,GAC1BlB,EAAWkB,KACZ,CAAClB,IAIJ,OAAIK,EAAe,cAAC,IAAD,CAAUc,GAAG,cAEzB,sBAAKrB,UAAU,OAAf,UACH,cAAC,IAAD,CAAWD,MAAM,YAChBM,GAAS,cAAC,IAAD,CAAUiB,QAASjB,EAAMiB,UACnC,cAAC,IAAD,CAAQC,cAPU,CAACb,KAAM,GAAII,MAAO,GAAIE,SAAU,IAQ1CQ,iBAAkBhB,EAClBU,SAAUA,EAFlB,SAGI,eAAC,IAAD,CAAMlB,UAAU,OAAhB,UACI,cAAC,IAAD,CAAWU,KAAK,OAAOe,YAAY,SACnC,cAAC,IAAD,CAAWf,KAAK,QAAQe,YAAY,qBACpC,cAAC,IAAD,CAAWf,KAAK,WAAWgB,KAAK,WAAWD,YAAY,eACvD,wBAAQC,KAAK,SAAS1B,UAAU,kBAAhC,0BAGR,uBACA,cAAC,IAAD,CAASqB,GAAG,SAASrB,UAAU,gBAA/B","file":"static/js/4.b227380f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\ninterface IState {\r\n    title: string\r\n}\r\n\r\nconst HelloCard: React.FC<IState> = ({title}) => {\r\n    return <div>\r\n        <h2 className=\"display-4\">Hello! This is {title}.</h2>\r\n        <p className=\"lead\">This is a simple contacts APP. Authorize or create an account to use all possibility</p>\r\n        <hr className=\"my-4\"/>\r\n    </div>\r\n}\r\n\r\nexport default HelloCard","import React, {useCallback} from 'react'\r\nimport {NavLink, Redirect} from \"react-router-dom\"\r\nimport AppError from \"../common/AppError\"\r\nimport {StoreType} from \"../../store\"\r\nimport {RegisterTC} from \"../../store/app-reducer\"\r\nimport {IRegisterData} from \"../../types/types\"\r\nimport {connect} from \"react-redux\"\r\nimport HelloCard from \"../common/HelloCard\"\r\nimport {Form, Formik} from 'formik'\r\nimport * as yup from 'yup'\r\nimport FormField from \"../common/FormFields/FormField\"\r\n\r\nconst SignUp: React.FC<StateType> = ({error, RegisterTC, isAuth}) => {\r\n\r\n    const SignupSchema = yup.object({\r\n        name: yup.string()\r\n            .min(3)\r\n            .matches(/^[a-zа-щієїґюьяыёъ\\s]+$/i, 'Field should contain only characters')\r\n            .required('Name is requires'),\r\n        email: yup.string().trim().email('Invalid email').required('Login is required'),\r\n        password: yup.string()\r\n            .trim()\r\n            .min(8)\r\n            .max(50)\r\n            .matches(/\\d+/, 'Password should include one number')\r\n            .matches(/[a-zа-щієїґюьяыёъ]+/, 'Password should include one lowercase later')\r\n            .matches(/[A-ZА-ЩІЄЇҐЮЬЯЫЁЪ]+/, 'Password should include one uppercase later')\r\n            .required('Password is required')\r\n    })\r\n\r\n    const onSubmit = useCallback((values) => {\r\n        RegisterTC(values)\r\n    }, [RegisterTC])\r\n\r\n    const initialValues = {name: '', email: '', password: ''}\r\n\r\n    if (isAuth) return <Redirect to='/contacts'/>\r\n\r\n    return <div className=\"mt-4\">\r\n        <HelloCard title='Sign Up'/>\r\n        {error && <AppError message={error.message}/>}\r\n        <Formik initialValues={initialValues}\r\n                validationSchema={SignupSchema}\r\n                onSubmit={onSubmit}>\r\n            <Form className='py-3'>\r\n                <FormField name='name' placeholder='Name'/>\r\n                <FormField name='email' placeholder='name@example.com'/>\r\n                <FormField name='password' type='password' placeholder='Example123'/>\r\n                <button type=\"submit\" className=\"btn btn-primary\">Sign Up</button>\r\n            </Form>\r\n        </Formik>\r\n        <hr/>\r\n        <NavLink to='/login' className=\"dropdown-item\">Have an account? Log in</NavLink>\r\n    </div>\r\n}\r\n\r\nconst mapState = (state: StoreType) => ({\r\n    error: state.app.error,\r\n    isAuth: state.app.isAuth\r\n})\r\n\r\nconst dispatchState = {\r\n    RegisterTC\r\n}\r\n\r\ninterface IDispatch {\r\n    RegisterTC: (data: IRegisterData) => void\r\n}\r\n\r\ntype StateType = ReturnType<typeof mapState> & IDispatch\r\n\r\nexport default connect(mapState, dispatchState)(SignUp)"],"sourceRoot":""}